plugins {
    id "com.android.application"
    // START: FlutterFire Configuration
    id 'com.google.gms.google-services'
    // END: FlutterFire Configuration
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

android {
    // ✅ 1. 네임스페이스를 고유 ID와 맞춰주는 것이 좋습니다.
    namespace = "com.yourcompany.passtime"
    // ✅ 2. 최신 안드로이드 버전에 맞춰 SDK 버전을 명시적으로 지정합니다.
    compileSdk = 34
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // ✅ 3. 매우 중요: 고유한 Application ID로 반드시 변경해야 합니다.
        applicationId = "com.yourcompany.passtime"
        
        // ✅ 4. 최소 및 타겟 SDK 버전을 명시적으로 지정합니다.
        minSdk = 23
        targetSdk = 34
        
        // ✅ 5. 앱 버전 정보를 명시적으로 지정합니다.
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
    }

    buildTypes {
        release {
            // TODO: 출시 전에는 반드시 실제 서명(signing config)을 설정해야 합니다.
            signingConfig = signingConfigs.debug
        }
    }
}

flutter {
    source = "../.."
}